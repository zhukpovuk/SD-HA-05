# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1W2yVb-qg0dg8bqSvHxAcc38E6POLtLaz
"""

import sqlite3
from flask import Flask, request, jsonify
app = Flask(__name__)

# Connection to the database
conn = sqlite3.connect('example.db')

# An object for executing SQL queries over the database
cur = conn.cursor()

# Executing a query
cur.execute('select 1')

# Reading the result. fetchone expects single line
print(cur.fetchone())

# Closing connection with a database
conn.close()

def get_db():
    """ Возвращает объект соединения с БД"""
    db = getattr(g, '_database', None)
    if db is None:
        db = g._database = sqlite3.connect(DATABASE)
    return db

@app.teardown_appcontext
def close_connection(exception):
    """Закрывает соединение с с БД"""
    db = getattr(g, '_database', None)
    if db is not None:
        db.close()

def create_tables(cur, conn):
    # Deleting old tables if they exist
    cur.execute('DROP TABLE IF EXISTS users')
    cur.execute('DROP TABLE IF EXISTS user_types')
    
    # Creating new tables
    cur.execute('''
        CREATE TABLE Account_model (
    account_id integer PRIMARY KEY,
    name varchar(40),
    date_of_creation date,
    date_of_last_update date,
    balance real
        )''')
    cur.execute('''
        CREATE TABLE Payment_model (
    id integer PRIMARY KEY,
    date date,
    amount boolean,
    balance_before_payment_now real,
    type char(40),
    optional_comment varchar(40)
        )''')
    
    # Send the current transaction.
    # Otherwise other database users won't see our changes
    # Connection close doesn't commit the results
    conn.commit()

def add_acc(cur):
    cur.execute('''INSERT INTO Account_model 
        (account_id, name, date_of_creation, date_of_last_update, balance) 
            VALUES (1, 'Maxim', '2022-01-01', '2021-01-01', 0.1)''')
    cur.execute('''INSERT INTO Account_model 
        (account_id, name, date_of_creation, date_of_last_update, balance) 
            VALUES (2, 'Oleg', '2022-02-01', '2021-02-01', 0.5)''')

def accounts(id, conn):
    query = '''SELECT *
               FROM Account_model
               WHERE account_id = id'''
    cur = conn.cursor()
    cur.execute(query)
    row = cur.fetchall()
    return json.dump(row)

@app.route("/account/<id>/payments", methods=['GET'])
def payments(id, conn):
    page = request.args.get('page', 1, type=int)
    query = '''SELECT *
            FROM Payment_model
            WHERE account_id = id'''
    cur = conn.cursor()
    cur.execute(query)
    rows = cur.fetchall()
    row = rows.paginate(page, 10, False)
    return json.dump(row)

@app.route("/account/<id>/payments", methods=['POST'])
def payments_post(id,conn):
    data = request.json
    row = [data['amount'], data['type'], data['comment']]
    amount_before = '''SELECT amount FROM Payment_model WHERE id = id'''
    cur = conn.cursor()
    cur.execute(amount_before)
    amount_1 = cur.fetchall()
    amount_after = amount_1 + row[0]
    cur.execute('''INSERT INTO Payment_model (amount, type, payment) VALUES (row[0], row[1], row[2])
        WHERE id = id''')
    conn.comit()
    query = '''
            UPDATE Payment_model SET amount = row[0], type = row[1], comment = row[2]
                WHERE id = id;'''
    cur.execute(amount_before)
    rows = cur.fetchall()
    return json.dump(rows)

if __name__ == "__main__":
    conn = sqlite3.connect('example.db')
    id = int(input())
    cur = conn.cursor()
    add_acc(cur)
    accounts(id, conn)
    payments(id, conn)
    payments_post(id,conn)